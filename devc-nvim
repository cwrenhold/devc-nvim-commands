#!/bin/bash

# Set up the standard variables
DEVCONTAINER_ID=$(devcontainer exec --workspace-folder ./ cat /etc/hostname)
DEVCONTAINER_HOME=$(devcontainer exec --workspace-folder ./ sh -c 'echo $HOME')

# If any of the standard variables aren't set, exit with a message
if [ -z "$DEVCONTAINER_ID" ] || [ -z "$DEVCONTAINER_HOME" ]; then
	echo -e "\n--- Failed to get the devcontainer ID or home directory, please ensure you are in a directory with a devcontainer"
	exit 1
fi

start_nvim() {
	devcontainer exec --workspace-folder ./ /opt/nvim-linux64/bin/nvim .
}

start_shell() {
	devcontainer exec --workspace-folder ./ sh
}

start_bash() {
	devcontainer exec --workspace-folder ./ bash
}

show_info() {
	echo -e "\n--- Devcontainer ID: $DEVCONTAINER_ID"
	echo -e "--- Devcontainer Home: $DEVCONTAINER_HOME\n"
}

clean_nvim() {
	devcontainer exec --workspace-folder ./ rm -rf $DEVCONTAINER_HOME/.config/nvim
	echo -e "\n--- Removed the existing neovim configuration\n"
}

config_nvim() {
	devcontainer exec --workspace-folder ./ mkdir -p $DEVCONTAINER_HOME/.config
	docker cp ~/.config/nvim $DEVCONTAINER_ID:$DEVCONTAINER_HOME/.config
	echo -e "\n--- Copied the neovim configuration to the container\n"
}

install() {
	echo -e "\n--- Installing neovim\n"
	devcontainer exec --workspace-folder ./ sh -c '
		cd ~
		curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
		sudo rm -rf /opt/nvim
		sudo tar xzf ~/nvim-linux64.tar.gz -C /opt
		'
	echo -e "\n--- Installed neovim\n"
}

install_nightly() {
	echo -e "\n--- Installing neovim\n"
	devcontainer exec --workspace-folder ./ sh -c '
		cd ~
		curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz
		sudo rm -rf /opt/nvim
		sudo tar xzf ~/nvim-linux64.tar.gz -C /opt
		'
	echo -e "\n--- Installed neovim\n"
}

install_dependencies() {
	echo -e "\n--- Installing dependencies\n"
	devcontainer exec --workspace-folder ./ sh -c '
		sudo apt-get update
		sudo apt-get install -y curl ripgrep
		'
	echo -e "\n--- Installed dependencies\n"
}

help() {
	echo -e "\nUsage: $(basename $0) [mode]"
	echo "  Applications:"
	echo "    nvim: Start neovim inside the container"
	echo "    shell or sh: Start a shell inside the container"
	echo "    bash: Start a bash shell inside the container"
	echo "  Commands:"
	echo "    clean: Remove the existing neovim configuration"
	echo "    config: Copy the neovim configuration to the container"
	echo "    info or show-info: Display information about the devcontainer"
	echo "    install: Install the latest stable version of neovim"
	echo "    install-nightly: Install the latest nightly version of neovim"
	echo "    install-dependencies or install-deps: Install the dependencies for neovim"
	echo "    setup-all: Sets up neovim from scratch, running through clean, install, and setup"
	echo "    setup-all-nightly: Sets up neovim from scratch with a nightly installation, running through clean, install-nightly, and setup"
	echo -e "    help: Display this help message\n"
}

MODE="nvim"

# If an argument is provided, use it as the mode
if [ $# -eq 1 ]; then
	MODE=$1
fi

case $MODE in 
	"nvim")
		start_nvim
		;;
	"shell"|"sh")
		start_shell
		;;
	"bash")
		start_bash
		;;
	"clean")
		clean_nvim
		;;
	"config")
		config_nvim
		;;
	"info"|"show-info")
		show_info
		;;
	"install")
		install
		;;
	"install-nightly")
		install_nightly
		;;
	"install-dependencies"|"install-deps")
		install_dependencies
		;;
	"setup-all")
		clean_nvim
		install_dependencies
		install
		config_nvim
		;;
	"setup-all-nightly")
		clean_nvim
		install_dependencies
		install_nightly
		config_nvim
		;;
	"help"|"-h"|"--help")
		help
		;;
	*)
		echo "Invalid mode: $mode"
		help
		;;
esac

