#!/usr/bin/env bash

# Set the default mode
MODE="nvim"

# Use the first argument which doesn't start with a dash as the mode
if [[ $1 != "-"* && $1 != "--" && $1 != "" ]]; then
  MODE="$1"
  shift
fi

help() {
    HELP_TEXT=$(cat <<EOF
Usage: $(basename $0) [mode]

  Applications:
    nvim: Start neovim inside the container
    shell or sh: Start a shell inside the container
    bash: Start a bash shell inside the container
  Container Management:
    status: Display the status of the dev container and associated containers
    status-all: Display the status of all containers associated with the dev container, including stopped containers
    up: Start the dev container (including compose if applicable)
    stop: Stops the dev container (including associated containers if applicable)
    destroy: Stops the container and removes it (excluding any other containers in the compose file)
    build: Build the dev container
  Commands:
    clean: Remove the existing neovim configuration
    config: Copy the neovim configuration to the container
    info or show-info: Display information about the devcontainer
    install-source: Install the latest stable version of neovim from source
    install-binary: Install the latest stable version of neovim from a binary
    install-nightly-source: Install the latest nightly version of neovim from source
    install-nightly-binary: Install the latest nightly version of neovim from a binary
    install-dependencies or install-deps: Install the dependencies for neovim
    setup: Sets up neovim from scratch, running through clean, install, and setup
    setup-nightly: Sets up neovim from scratch with a nightly installation, running through clean, install-nightly, and setup
    scaffold: Scaffold a new devcontainer configuration using a Dockerfile
    help: Display this help message

  Options:
    -p or --path: The path to the devcontainer (default: ./)
    -i or --id: The ID of the devcontainer (default: auto-detected)

  Examples:
    $(basename $0)
      - Start neovim inside the default container
    $(basename $0) shell
      - Start a shell inside the default container
    $(basename $0) clean -p ..
      - Remove the existing neovim configuration from the default container found from the parent directory
    $(basename $0) config -i 12345
      - Copy the neovim configuration to the container with the ID 12345
EOF
    )

    echo -e "$HELP_TEXT"
}

# Define the options available in both forms
SHORT_OPTS="p:i:"
LONG_OPTS="path:,id:"

# Parse the options
PARSED_OPTS=$(getopt -o $SHORT_OPTS --long $LONG_OPTS --name "$(basename $0)" -- "$@")

# If the options are invalid, exit with a message
if [ $? -ne 0 ]; then
    echo "Invalid options were provided"
    help
    exit 1
fi

# Set the parsed options into the current scope
eval set -- "$PARSED_OPTS"

DEVCONTAINER_PATH="./"
DEVCONTAINER_ID=""
DEVCONTAINER_HOME=""

# If there are any options, parse them
if [ $# -gt 0 ]; then
    while true; do
        case "$1" in
            -p|--path)
                DEVCONTAINER_PATH=$2
                shift 2
                ;;
            -i|--id)
                DEVCONTAINER_ID=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "Invalid option: $1"
                help
                exit 1
                ;;
        esac
    done
fi

# Some modes don't require the container to be running
DOES_NOT_REQUIRE_RUNNING_CONTAINER=("up" "build" "help" "scaffold")

# If the mode doesn't require the container to be running, then we don't need to check the container ID
if [[ ! " ${DOES_NOT_REQUIRE_RUNNING_CONTAINER[@]} " =~ " ${MODE} " ]]; then
    # If the container ID is not set, then load it using the devcontainer command
    if [ -z "$DEVCONTAINER_ID" ]; then
        DEVCONTAINER_ID=$(devcontainer exec --workspace-folder $DEVCONTAINER_PATH cat /etc/hostname)
    fi

    # Set up the standard variables
    DEVCONTAINER_HOME=$(devcontainer exec --workspace-folder $DEVCONTAINER_PATH sh -c 'echo $HOME')

    # If any of the standard variables aren't set, exit with a message
    if [ -z "$DEVCONTAINER_ID" ] || [ -z "$DEVCONTAINER_HOME" ]; then
        echo -e "\n--- Failed to get the devcontainer ID or home directory, please ensure you are in a directory with a devcontainer"
        echo -e "--- Path: $DEVCONTAINER_PATH"
        exit 1
    fi
fi

start_nvim() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH nvim .
}

start_shell() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH sh
}

start_bash() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH bash
}

show_info() {
    echo -e "\n--- Devcontainer Information ---"
    echo -e "--- Path: $DEVCONTAINER_PATH"
    echo -e "--- ID:   $DEVCONTAINER_ID"
    echo -e "--- Home: $DEVCONTAINER_HOME\n"
}

clean_nvim() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH rm -rf $DEVCONTAINER_HOME/.config/nvim
    echo -e "\n--- Removed the existing neovim configuration\n"
}

config_nvim() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH mkdir -p $DEVCONTAINER_HOME/.config
    docker cp ~/.config/nvim $DEVCONTAINER_ID:$DEVCONTAINER_HOME/.config
    echo -e "\n--- Copied the neovim configuration to the container\n"
}

run_commands_in_container() {
    # Create an array of commands to execute
    commands=("$@")

    echo -e "\n--- Running commands in dev container ---"
    for command in "${commands[@]}"; do
        echo "- $command"
    done

    echo -e "---\n"

    # Build a commandString from the array with newlines
    command_string=$(printf "%s\n" "${commands[@]}")

    # Execute the commands
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH sh -c "$command_string"
}

install_source() {
    echo -e "\n--- Installing neovim\n"

    source_version="neovim-stable"
    file_url="https://github.com/neovim/neovim/archive/refs/tags/stable.tar.gz"
    get_command="curl -LO $file_url"

    echo "Downloading neovim from $file_url"

    commands=(
        # Store reference to sudo if that exists
        "sudo=\$(command -v sudo)"
        # Create a temporary directory to download the neovim source tarball
        "mkdir -p /tmp/nvim-src"
        "cd /tmp/nvim-src"
        "$get_command"
        "\$sudo tar xzf stable.tar.gz -C /tmp/nvim-src"
        "cd $source_version"
        "\$sudo make CMAKE_BUILD_TYPE=Release"
        "\$sudo make install"
    )

    run_commands_in_container "${commands[@]}"

    echo -e "\n--- Installed neovim\n"
}

install_source_nightly() {
    echo -e "\n--- Installing neovim\n"

    source_version="neovim-nightly"
    file_url="https://github.com/neovim/neovim/archive/refs/tags/nightly.tar.gz"
    get_command="curl -LO $file_url"

    echo "Downloading neovim from $file_url"

    commands=(
        # Store reference to sudo if that exists
        "sudo=\$(command -v sudo)"
        # Create a temporary directory to download the neovim source tarball
        "mkdir -p /tmp/nvim-src"
        "cd /tmp/nvim-src"
        "$get_command"
        "\$sudo tar xzf nightly.tar.gz -C /tmp/nvim-src"
        "cd $source_version"
        "\$sudo make CMAKE_BUILD_TYPE=Release"
        "\$sudo make install"
    )

    run_commands_in_container "${commands[@]}"

    echo -e "\n--- Installed neovim\n"
}

determine_nvim_binary_version() {
    architecure=$(devcontainer exec --workspace-folder $DEVCONTAINER_PATH uname -m)
    operating_system=$(devcontainer exec --workspace-folder $DEVCONTAINER_PATH uname -s)
    requires_install_from_source=false

    if [ "$operating_system" == "Linux" ]; then
        if [ "$architecure" == "x86_64" ]; then
            source_version="linux64"
        else
            requires_install_from_source=true
        fi
    elif [ "$operating_system" == "Darwin" ]; then
        if [ "$architecure" == "x86_64" ]; then
            source_version="macos-x86_64"
        else
            source_version="macos-arm64"
        fi
    else
        requires_install_from_source=true
    fi
}

install_binary() {
    echo -e "\n--- Installing neovim\n"

    determine_nvim_binary_version

    if [ "$requires_install_from_source" = true ]; then
        echo -e "\n--- Unsupported system ($operating_system $architecure) for binary installation, installing from source\n"

        install_build_dependencies
        install_source
        return
    fi

    file_url="https://github.com/neovim/neovim/releases/download/stable/nvim-$source_version.tar.gz"
    get_command="curl -LO $file_url"

    echo "Downloading neovim from $file_url"

    commands=(
        # Store reference to sudo if that exists
        "sudo=\$(command -v sudo)"
        # Create a temporary directory to download the neovim binary tarball
        "mkdir -p /tmp/nvim-binary"
        "cd /tmp/nvim-binary"
        "$get_command"
        "\$sudo tar xzf nvim-$source_version.tar.gz -C /tmp/nvim-binary"
        "\$sudo ln -sf /tmp/nvim-binary/nvim-$source_version/bin/nvim /usr/local/bin/nvim"
    )

    run_commands_in_container "${commands[@]}"

    echo -e "\n--- Installed neovim\n"
}

install_nightly_binary() {
    echo -e "\n--- Installing neovim\n"

    determine_nvim_binary_version

    if [ "$requires_install_from_source" = true ]; then
        echo -e "\n--- Unsupported system ($operating_system $architecure) for binary installation, installing from source\n"

        install_build_dependencies
        install_source_nightly
        return
    fi

    file_url="https://github.com/neovim/neovim/releases/download/nightly/nvim-$source_version.tar.gz"
    get_command="curl -LO $file_url"

    echo "Downloading neovim from $file_url"

    commands=(
        # Store reference to sudo if that exists
        "sudo=\$(command -v sudo)"
        # Create a temporary directory to download the neovim binary tarball
        "mkdir -p /tmp/nvim-binary"
        "cd /tmp/nvim-binary"
        "$get_command"
        "\$sudo tar xzf nvim-$source_version.tar.gz -C /tmp/nvim-binary"
        "\$sudo ln -sf /tmp/nvim-binary/nvim-$source_version/bin/nvim /usr/local/bin/nvim"
    )

    run_commands_in_container "${commands[@]}"

    echo -e "\n--- Installed neovim\n"
}

install_dependencies() {
    echo -e "\n--- Installing dependencies\n"

    # List of packages to install with apt-get
    packages=(
        "curl"    # For downloading neovim and rust
        "ripgrep" # For fzf
        "nodejs"  # For additional tooling (e.g. Copilot)
    )

    package_string=$(printf "%s " "${packages[@]}")

    commands=(
        # Store reference to sudo if that exists
        "sudo=\$(command -v sudo)"
        "\$sudo apt-get update"
        "\$sudo apt-get install -y $package_string"
        # Install rust in the container
        "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
    )

    run_commands_in_container "${commands[@]}"

    echo -e "\n--- Installed dependencies\n"
}

install_build_dependencies() {
    echo -e "\n--- Installing build dependencies\n"

    # List of packages to install with apt-get
    packages=(
        "cmake"
        "ninja-build"
        "gettext"
        "unzip"
    )

    package_string=$(printf "%s " "${packages[@]}")

    commands=(
        # Store reference to sudo if that exists
        "sudo=\$(command -v sudo)"
        "\$sudo apt-get update"
        "\$sudo apt-get install -y $package_string"
    )

    run_commands_in_container "${commands[@]}"

    echo -e "\n--- Installed build dependencies\n"
}

devcontainer_up() {
    echo -e "\n--- Starting the dev container\n"

    devcontainer up --workspace-folder $DEVCONTAINER_PATH

    echo -e "\n--- Started the dev container\n"
}

get_associated_containers() {
    # First, check if the devcontainer has a com.docker.compose.project label
    SEARCH_KEY="com.docker.compose.project"

    # Find the project name for the devcontainer
    SEARCH_VALUE=$(docker inspect -f '{{ index .Config.Labels "'"$SEARCH_KEY"'" }}' "$DEVCONTAINER_ID")

    # If the project name is found, then get all containers associated with the project
    if [ -n "$SEARCH_VALUE" ]; then
        FULL_CONTAINER_LIST=$(docker ps -q --filter label="$SEARCH_KEY=$SEARCH_VALUE")
    else
        # If the project name is not found, then get all containers with the same devcontainer.config_file label
        SEARCH_KEY="devcontainer.config_file"

        # Find the config file for the devcontainer
        SEARCH_VALUE=$(docker inspect -f '{{ index .Config.Labels "'"$SEARCH_KEY"'" }}' "$DEVCONTAINER_ID")

        FULL_CONTAINER_LIST=$(docker ps -q --filter label="$SEARCH_KEY=$SEARCH_VALUE")
    fi
}

devcontainer_container_status() {
    get_associated_containers

    docker ps --filter label="$SEARCH_KEY=$SEARCH_VALUE"
}

devcontainer_container_status_all() {
    get_associated_containers

    docker ps --filter label="$SEARCH_KEY=$SEARCH_VALUE" -a
}

devcontainer_stop() {
    echo -e "\n--- Stopping the containers associated with: $DEVCONTAINER_ID\n"

    get_associated_containers

    # Get a count of the containers
    CONTAINER_COUNT=$(echo $FULL_CONTAINER_LIST | wc -w)

    if [ $CONTAINER_COUNT -eq 0 ]; then
        echo -e "\n--- No containers found associated with: $SEARCH_VALUE with key: $SEARCH_KEY\n"
        return
    fi

    echo -e "\n--- Found $CONTAINER_COUNT container(s) associated with: $SEARCH_VALUE\n"

    for container_id in $FULL_CONTAINER_LIST; do
        echo "Stopping container: $container_id"
        docker stop $container_id
    done

    echo -e "\n--- Stopped the containers associated with: $SEARCH_VALUE\n"
}

devcontainer_build() {
    echo -e "\n--- Building the dev container\n"

    devcontainer build --workspace-folder $DEVCONTAINER_PATH

    echo -e "\n--- Built the dev container\n"
}

devcontainer_destroy() {
    echo -e "\n--- Destroying the container: $DEVCONTAINER_ID\n"

    docker stop $DEVCONTAINER_ID
    docker rm $DEVCONTAINER_ID

    echo -e "\n--- Destroyed the container: $DEVCONTAINER_ID\n"
}

devcontainer_scaffold() {
    # Create a devcontainer directory
    mkdir -p .devcontainer

    # Check if there is already a devcontainer configuration json or Dockerfile exists
    if [ -f .devcontainer/devcontainer.json ] || [ -f .devcontainer/Dockerfile ]; then
        echo -e "\n--- A devcontainer configuration already exists\n"
        return
    fi

    # Create a devcontainer.json file
    echo -e "\n--- Scaffolding a new devcontainer configuration\n"

    # Default the project name to the name of the current directory
    PROJECT_NAME=$(basename $(pwd))
    cat <<EOF > .devcontainer/devcontainer.json
{
    "name": "$PROJECT_NAME Dev Container",
    "build": {
        "dockerfile": "Dockerfile",
        "context": "."
    }
}
EOF

    # Create a Dockerfile if one doesn't exist
    echo -e "\n--- Scaffolding a new devcontainer Dockerfile\n"

    base_image="mcr.microsoft.com/devcontainers/base:bullseye"
    cat <<EOF > .devcontainer/Dockerfile
FROM $base_image
EOF

    echo -e "\n--- Scaffolding complete\n"
}

case $MODE in
    "nvim")
        start_nvim
        ;;
    "shell"|"sh")
        start_shell
        ;;
    "bash")
        start_bash
        ;;
    "clean")
        clean_nvim
        ;;
    "config")
        config_nvim
        ;;
    "info"|"show-info")
        show_info
        ;;
    "install-source")
        install_build_dependencies
        install_source
        ;;
    "install-nightly-source")
        install_build_dependencies
        install_source_nightly
        ;;
    "install-binary")
        install_binary
        ;;
    "install-nightly-binary")
        install_nightly_binary
        ;;
    "install-dependencies"|"install-deps")
        install_dependencies
        ;;
    "setup")
        clean_nvim
        install_dependencies
        install_binary
        config_nvim
        ;;
    "setup-nightly")
        clean_nvim
        install_dependencies
        install_nightly_binary
        config_nvim
        ;;
    "up")
        devcontainer_up
        ;;
    "status")
        devcontainer_container_status
        ;;
    "status-all")
        devcontainer_container_status_all
        ;;
    "stop")
        devcontainer_stop
        ;;
    "build")
        devcontainer_build
        ;;
    "destroy")
        devcontainer_destroy
        ;;
    "scaffold")
        devcontainer_scaffold
        ;;
    "help")
        help
        ;;
    *)
        echo "Invalid mode: $MODE"
        help
        ;;
esac

