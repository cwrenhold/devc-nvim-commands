#!/bin/bash

# Set the default mode
MODE="nvim"

# Use the first argument which doesn't start with a dash as the mode
if [[ $1 != "-"* && $1 != "--" && $1 != "" ]]; then
  MODE="$1"
  shift
fi

help() {
    HELP_TEXT=$(cat <<EOF
Usage: $(basename $0) [mode]

  Applications:
    nvim: Start neovim inside the container
    shell or sh: Start a shell inside the container
    bash: Start a bash shell inside the container
  Commands:
    clean: Remove the existing neovim configuration
    config: Copy the neovim configuration to the container
    info or show-info: Display information about the devcontainer
    install: Install the latest stable version of neovim
    install-nightly: Install the latest nightly version of neovim
    install-dependencies or install-deps: Install the dependencies for neovim
    setup: Sets up neovim from scratch, running through clean, install, and setup
    setup-nightly: Sets up neovim from scratch with a nightly installation, running through clean, install-nightly, and setup
    help: Display this help message

  Options:
    -p or --path: The path to the devcontainer (default: ./)
    -i or --id: The ID of the devcontainer (default: auto-detected)
    
  Examples:
    $(basename $0)
      - Start neovim inside the default container
    $(basename $0) shell
      - Start a shell inside the default container
    $(basename $0) clean -p ..
      - Remove the existing neovim configuration from the default container found from the parent directory
    $(basename $0) config -i 12345
      - Copy the neovim configuration to the container with the ID 12345
EOF
    )

    echo -e "$HELP_TEXT"
}

# Define the options available in both forms
SHORT_OPTS="p:i:"
LONG_OPTS="path:,id:"

# Parse the options
PARSED_OPTS=$(getopt -o $SHORT_OPTS --long $LONG_OPTS --name "$(basename $0)" -- "$@")

# If the options are invalid, exit with a message
if [ $? -ne 0 ]; then
    echo "Invalid options were provided"
    help
    exit 1
fi

# Set the parsed options into the current scope
eval set -- "$PARSED_OPTS"

DEVCONTAINER_PATH="./"
DEVCONTAINER_ID=""

# If there are any options, parse them
if [ $# -gt 0 ]; then
    while true; do
        case "$1" in
            -p|--path)
                DEVCONTAINER_PATH=$2
                shift 2
                ;;
            -i|--id)
                DEVCONTAINER_ID=$2
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "Invalid option: $1"
                help
                exit 1
                ;;
        esac
    done
fi

# If the ID is not set, then load it using the devcontainer command
if [ -z "$DEVCONTAINER_ID" ]; then
    DEVCONTAINER_ID=$(devcontainer exec --workspace-folder $DEVCONTAINER_PATH cat /etc/hostname)
fi

# Set up the standard variables
DEVCONTAINER_HOME=$(devcontainer exec --workspace-folder $DEVCONTAINER_PATH sh -c 'echo $HOME')

# If any of the standard variables aren't set, exit with a message
if [ -z "$DEVCONTAINER_ID" ] || [ -z "$DEVCONTAINER_HOME" ]; then
    echo -e "\n--- Failed to get the devcontainer ID or home directory, please ensure you are in a directory with a devcontainer"
    echo -e "--- Path: $DEVCONTAINER_PATH"
    exit 1
fi

start_nvim() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH /opt/nvim-linux64/bin/nvim .
}

start_shell() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH sh
}

start_bash() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH bash
}

show_info() {
    echo -e "\n--- Devcontainer Information ---"
    echo -e "--- Path: $DEVCONTAINER_PATH"
    echo -e "--- ID:   $DEVCONTAINER_ID"
    echo -e "--- Home: $DEVCONTAINER_HOME\n"
}

clean_nvim() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH rm -rf $DEVCONTAINER_HOME/.config/nvim
    echo -e "\n--- Removed the existing neovim configuration\n"
}

config_nvim() {
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH mkdir -p $DEVCONTAINER_HOME/.config
    docker cp ~/.config/nvim $DEVCONTAINER_ID:$DEVCONTAINER_HOME/.config
    echo -e "\n--- Copied the neovim configuration to the container\n"
}

run_commands() {
    # Create an array of commands to execute
    commands=("$@")

    # Build a commandString from the array with newlines
    command_string=$(printf "%s\n" "${commands[@]}")

    # Execute the commands
    devcontainer exec --workspace-folder $DEVCONTAINER_PATH sh -c "$command_string"
}

install() {
    echo -e "\n--- Installing neovim\n"

    commands=(
        # Create a temporary directory to download the neovim tarball
        "mkdir -p /tmp/nvim-install"
        "cd /tmp/nvim-install"
        "curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
        "sudo rm -rf /opt/nvim"
        "sudo tar xzf /tmp/nvim-install/nvim-linux64.tar.gz -C /opt"

        # Create a symlink to the neovim binary, replacing any existing symlink so that it can be run from a shell
        "mkdir -p /usr/local/bin"
        "sudo rm -f /usr/local/bin/nvim"
        "sudo ln -s /opt/nvim-linux64/bin/nvim /usr/local/bin/nvim"
    )

    run_commands "${commands[@]}"

    echo -e "\n--- Installed neovim\n"
}

install_nightly() {
    echo -e "\n--- Installing neovim\n"

    commands=(
        # Create a temporary directory to download the neovim tarball
        "mkdir -p /tmp/nvim-install"
        "cd /tmp/nvim-install"
        "curl -LO https://github.com/neovim/neovim/releases/download/nightly/nvim-linux64.tar.gz"
        "sudo rm -rf /opt/nvim"
        "sudo tar xzf /tmp/nvim-install/nvim-linux64.tar.gz -C /opt"

        # Create a symlink to the neovim binary, replacing any existing symlink so that it can be run from a shell
        "mkdir -p /usr/local/bin"
        "sudo rm -f /usr/local/bin/nvim"
        "sudo ln -s /opt/nvim-linux64/bin/nvim /usr/local/bin/nvim"
    )

    run_commands "${commands[@]}"

    echo -e "\n--- Installed neovim\n"
}

install_dependencies() {
    echo -e "\n--- Installing dependencies\n"

    # List of packages to install with apt-get
    packages=(
        "curl"    # For downloading neovim
        "ripgrep" # For fzf
        "nodejs"  # For additional tooling (e.g. Copilot)
    )

    package_string=$(printf "%s " "${packages[@]}")

    commands=(
        "sudo apt-get update"
        "sudo apt-get install -y $package_string"
    )

    run_commands "${commands[@]}"

    echo -e "\n--- Installed dependencies\n"
}

case $MODE in 
    "nvim")
        start_nvim
        ;;
    "shell"|"sh")
        start_shell
        ;;
    "bash")
        start_bash
        ;;
    "clean")
        clean_nvim
        ;;
    "config")
        config_nvim
        ;;
    "info"|"show-info")
        show_info
        ;;
    "install")
        install
        ;;
    "install-nightly")
        install_nightly
        ;;
    "install-dependencies"|"install-deps")
        install_dependencies
        ;;
    "setup")
        clean_nvim
        install_dependencies
        install
        config_nvim
        ;;
    "setup-nightly")
        clean_nvim
        install_dependencies
        install_nightly
        config_nvim
        ;;
    "help")
        help
        ;;
    *)
        echo "Invalid mode: $MODE"
        help
        ;;
esac

